const dotenv = require('dotenv');
dotenv.config({ path: '/etc/secrets/.env' }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render
dotenv.config(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏≤

const { Client, GatewayIntentBits } = require('discord.js');
const playdl = require('play-dl');
const config = require('./config');
const { setClient } = require('./handlers/player');
const { handleVoiceStateUpdate } = require('./handlers/voiceState');
const { loadCommands, handleCommand } = require('./handlers/commandHandler');
const { exec } = require('child_process');
const fs = require('fs');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Discord client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates
    ]
});

// if (process.env.YOUTUBE_COOKIE) {
//     const cookie = process.env.YOUTUBE_COOKIE;
//     console.log('üîç Debug: YOUTUBE_COOKIE =', cookie);
//     if (cookie && cookie.includes(';')) {
//         playdl.setToken({ youtube: { cookie: cookie } });
//         console.log('‚úÖ YouTube cookie loaded');
//     } else {
//         console.error('‚ùå Invalid YouTube cookie format. Ensure it contains key-value pairs separated by semicolons.');
//     }
// } else if (process.env.YOUTUBE_API_KEY) {
//     playdl.setToken({ youtube: { apiKey: process.env.YOUTUBE_API_KEY } });
//     console.log('‚úÖ YouTube API Key loaded');
// }

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const commands = loadCommands();
console.log(`üìã Loaded ${commands.size} commands`);

// ‡∏™‡πà‡∏á client ‡πÉ‡∏´‡πâ player handler
setClient(client);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ yt-dlp ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å YouTube
async function playWithYtDlp(url, message) {
    console.log(`üéµ Attempting to play: ${url}`);

    // Check if the user is in a voice channel
    const voiceChannel = message.member?.voice?.channel;
    if (!voiceChannel) {
        message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
        return;
    }

    // Join the voice channel
    const connection = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: voiceChannel.guild.id,
        adapterCreator: voiceChannel.guild.voiceAdapterCreator,
    });

    // Create an audio player
    const player = createAudioPlayer();

    // Play the audio using yt-dlp
    exec(`./yt-dlp -f bestaudio --cookies /etc/secrets/cookies.txt -o - ${url}`, (error, stdout, stderr) => {
        if (error) {
            console.error(`‚ùå yt-dlp Error: ${error.message}`);
            message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
            return;
        }
        if (stderr) {
            console.error(`‚ö†Ô∏è yt-dlp Stderr: ${stderr}`);
        }
        console.log(`‚úÖ yt-dlp Output: ${stdout}`);

        // Create an audio resource from the yt-dlp output
        const resource = createAudioResource(stdout.trim()); // ‡πÉ‡∏ä‡πâ stdout ‡∏à‡∏≤‡∏Å yt-dlp
        player.play(resource);

        // Subscribe the connection to the audio player
        connection.subscribe(player);

        player.on(AudioPlayerStatus.Playing, () => {
            console.log('üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á');
            message.reply('üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
        });

        player.on(AudioPlayerStatus.Idle, () => {
            console.log('üéµ ‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
            connection.destroy();
        });

        player.on('error', (err) => {
            console.error('‚ùå Audio Player Error:', err);
            message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á');
            connection.destroy();
        });
    });
}

// Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°
client.once('ready', () => {
    console.log(`‚úÖ Logged in as ${client.user.tag}`);
    console.log('üéµ Music Bot is ready!');
    client.user.setActivity('!help | Music Bot', { type: 2 });
});

// Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
client.on('messageCreate', async (message) => {
    console.log(`üì© Received message: ${message.content}`); // Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    if (message.content.startsWith('!play')) {
        const url = message.content.split(' ')[1]; // ‡∏î‡∏∂‡∏á URL ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        console.log(`üéµ Attempting to play URL: ${url}`); // Log URL ‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡πà‡∏ô
        if (!url) {
            message.reply('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ URL ‡∏Ç‡∏≠‡∏á YouTube');
            return;
        }
        await playWithYtDlp(url, message);
    } else {
        await handleCommand(message, config.settings.prefix, commands);
    }
});

// Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á voice state
client.on('voiceStateUpdate', (oldState, newState) => {
    handleVoiceStateUpdate(oldState, newState);
});

// Error Handling
client.on('error', (error) => console.error('Discord client error:', error));
client.on('rateLimit', (info) => console.warn('Rate limited:', info));

client.login(process.env.TOKEN || process.env.DISCORD_BOT_TOKEN)
    .catch((error) => {
        console.error('Failed to login:', error);
        process.exit(1);
    });

// ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
process.on('SIGINT', () => {
    console.log('\nüõë Shutting down gracefully...');
    if (config.state.currentConnection) config.state.currentConnection.destroy();
    client.destroy();
    process.exit(0);
});

process.on('unhandledRejection', (error) => console.error('Unhandled promise rejection:', error));
process.on('uncaughtException', (error) => console.error('Uncaught exception:', error));

if (!fs.existsSync('cookies.txt')) {
    console.error('‚ùå cookies.txt not found. Please upload the file.');
} else {
    console.log('‚úÖ cookies.txt found and ready to use.');
}
