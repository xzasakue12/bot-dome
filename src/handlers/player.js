const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, StreamType, VoiceConnectionStatus, entersState } = require('@discordjs/voice');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const config = require('../config');
const { getYtDlpPath } = require('../utils/helpers');
const { getRandomYouTubeVideo } = require('../utils/youtube');
const { logOnce, warnOnce, errorOnce } = require('../utils/logger');
const { cleanupProcesses } = require('../services/resourceManager');
const { setupConnectionHandlers } = require('../services/connectionManager');
const { checkAndLeaveIfEmpty } = require('../services/voiceChannelManager');
const extractVideoId = require('../utils/extractVideoId');
const buildYtDlpArgs = require('../utils/buildYtDlpArgs');
const buildFfmpegArgs = require('../utils/buildFfmpegArgs');

let client;

// Connection management
const connectionState = new Map();
const MAX_RETRIES = 3;
const RETRY_DELAY = 2000;
const CONNECTION_TIMEOUT = 20000;
const RECONNECT_DELAY = 3000;

// Lock mechanism
const processingGuilds = new Set();

// Define cookiesPaths
const cookiesPaths = [
    path.resolve(__dirname, '../../cookies.txt'),
    path.resolve(__dirname, '../../youtube_cookies.txt'),
    '/etc/secrets/cookies.txt'
];

// Utility to track logs
const lastLogs = new Map();

function setClient(discordClient) {
    client = discordClient;
}

async function createVoiceConnection(voiceChannel, guildId) {
    try {
        console.log(`üîå [${guildId}] Creating voice connection...`);
        const connection = joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: guildId,
            adapterCreator: voiceChannel.guild.voiceAdapterCreator,
            selfDeaf: false,
            selfMute: false,
            debug: false
        });
        setupConnectionHandlers(connection, guildId, voiceChannel);
        await entersState(connection, VoiceConnectionStatus.Ready, 20000);
        console.log(`‚úÖ [${guildId}] Connection ready`);
        return connection;
    } catch (error) {
        console.error(`‚ùå [${guildId}] Failed to create connection:`, error);
        throw error;
    }
}

async function playWithYtDlp(cleanUrl, message, connection) {
    return new Promise((resolve, reject) => {
        let ytdlpProcess;
        let ffmpegProcess;
        let isResolved = false;
        let expectedDuration = null;
        let ytdlpBytesReceived = 0;  // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö bytes

        try {
            const ytdlpArgs = buildYtDlpArgs(cleanUrl);
            const ffmpegArgs = buildFfmpegArgs();

            logOnce('yt-dlp-start', `üéµ Starting yt-dlp stream for: ${cleanUrl}`);

            let cookiesPath = null;
            for (const p of cookiesPaths) {
                if (p && fs.existsSync(p)) {
                    cookiesPath = p;
                    break;
                }
            }

            if (cookiesPath) {
                console.log('üç™ Using cookies for authentication:', cookiesPath);
                ytdlpArgs.push('--cookies', cookiesPath);
            } else {
                warnOnce('no-cookies', '‚ö†Ô∏è No cookies.txt found - YouTube may block requests');
            }

            console.log('üîß yt-dlp command:', getYtDlpPath(), ytdlpArgs.slice(0, 5).join(' '), '...');

            ytdlpProcess = spawn(getYtDlpPath(), ytdlpArgs, {
                shell: false,
                windowsHide: true,
                stdio: ['ignore', 'pipe', 'pipe'],
                timeout: 30000
            });

            let stderrOutput = '';

            // ‚≠ê ‡πÉ‡∏ä‡πâ --dump-single-json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á metadata ‡∏Å‡πà‡∏≠‡∏ô
            console.log('üìä Fetching video metadata...');
            const metadataArgs = [
                '--dump-single-json',
                '--no-warnings',
                cleanUrl
            ];
            
            if (cookiesPath) {
                metadataArgs.push('--cookies', cookiesPath);
            }
            
            const metadataProcess = spawn(getYtDlpPath(), metadataArgs, {
                shell: false,
                stdio: ['ignore', 'pipe', 'pipe']
            });
            
            let metadataJson = '';
            metadataProcess.stdout.on('data', (data) => {
                metadataJson += data.toString();
            });
            
            metadataProcess.on('close', (code) => {
                if (code === 0 && metadataJson) {
                    try {
                        const metadata = JSON.parse(metadataJson);
                        expectedDuration = Math.round(metadata.duration * 1000);
                        console.log(`üìä Duration from metadata: ${expectedDuration}ms (${Math.round(expectedDuration/1000)}s)`);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è Failed to parse metadata, using default duration');
                        expectedDuration = 300000;
                    }
                } else {
                    console.warn('‚ö†Ô∏è Failed to fetch metadata, using default duration');
                    expectedDuration = 300000;
                }
            });

            // ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç stderr handler - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á duration ‡πÅ‡∏•‡πâ‡∏ß
            ytdlpProcess.stderr.on('data', (data) => {
                const output = data.toString();
                stderrOutput += output;
                
                // ‚≠ê Debug: ‡πÅ‡∏™‡∏î‡∏á stderr ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                const lines = output.split('\n').filter(l => l.trim());
                lines.forEach(line => {
                    if (line.includes('ERROR') || line.includes('WARNING')) {
                        console.log(`üìù [yt-dlp] ${line.trim()}`);
                    }
                });
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö errors
                if (output.includes('ERROR:') || output.includes('ERROR')) {
                    console.error('üö® yt-dlp ERROR:', output.trim());
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bot detection
                if (output.includes('Sign in to confirm') ||
                    output.includes('not a bot') ||
                    output.includes('bot detection')) {
                    console.error('ü§ñ YouTube bot detection triggered!');
                    console.error('üí° Your cookies.txt may be missing, invalid, or expired');
                }
            });

            // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stdout bytes
                ytdlpProcess.stdout.on('data', (chunk) => {
                    ytdlpBytesReceived += chunk.length;
                
                // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á progress ‡∏ó‡∏∏‡∏Å 1MB
                    if (ytdlpBytesReceived % (1024 * 1024) < chunk.length) {
                     console.log(`üì• Received ${Math.round(ytdlpBytesReceived / 1024 / 1024)}MB`);
                    }
             });

            ytdlpProcess.on('error', (err) => {
                if (!isResolved) {
                    isResolved = true;
                    errorOnce('yt-dlp-error', `‚ùå yt-dlp process error: ${err}`);
                    cleanupProcesses(ytdlpProcess, ffmpegProcess);
                    reject(err);
                }
            });

            ytdlpProcess.on('close', (code) => {
                console.log(`üìä yt-dlp closed with code ${code}, sent ${ytdlpBytesReceived} bytes`);
                
                const expectedBytes = expectedDuration ? (expectedDuration / 1000) * 16 * 1024 : 0;
                const bytesPercent = expectedBytes > 0 ? (ytdlpBytesReceived / expectedBytes) * 100 : 0;
                
                if (ytdlpBytesReceived === 0) {
                    console.error('‚ùå yt-dlp sent NO DATA - likely failed to fetch video');
                } else if (bytesPercent < 50) {
                    console.warn(`‚ö†Ô∏è yt-dlp sent only ${bytesPercent.toFixed(1)}% of expected data`);
                }
            });

            ffmpegProcess = spawn('ffmpeg', ffmpegArgs, {
                shell: false,
                windowsHide: true,
                stdio: ['pipe', 'pipe', 'pipe']
            });

            const resource = createAudioResource(ffmpegProcess.stdout, {
                inputType: StreamType.Arbitrary,
                inlineVolume: true
            });

            if (resource.volume) {
                resource.volume.setVolume(0.5);
            }

            let dataReceived = false;
            const originalRead = ffmpegProcess.stdout.read;
            ffmpegProcess.stdout.read = function(...args) {
                if (!dataReceived) {
                    dataReceived = true;
                    console.log('‚úÖ Audio stream receiving data from FFmpeg...');
                }
                return originalRead.apply(this, args);
            };

            ffmpegProcess.stdout.once('readable', () => {
                if (!dataReceived) {
                    dataReceived = true;
                    console.log('‚úÖ Audio stream ready (readable)');
                }
            });

            // ‚≠ê ‡∏•‡∏ö timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö duration (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å metadata ‡πÅ‡∏•‡πâ‡∏ß)

            resource.metadata = {
                ytdlpProcess,
                ffmpegProcess,
                expectedDuration,
                hasReceivedData: () => dataReceived,
                cleanup: () => cleanupProcesses(ytdlpProcess, ffmpegProcess)
            };

            ytdlpProcess.stdout.on('error', (err) => {
                if (err.code === 'EPIPE') {
                    console.error('‚ö†Ô∏è yt-dlp stdout pipe closed');
                    return;
                }
                console.error('‚ùå yt-dlp stdout error:', err);
                cleanupProcesses(ytdlpProcess, ffmpegProcess);
            });

            ffmpegProcess.stdin.on('error', (err) => {
                if (err.code === 'EPIPE') {
                    console.error('‚ö†Ô∏è FFmpeg stdin pipe closed');
                    cleanupProcesses(ytdlpProcess, ffmpegProcess);
                }
            });

            ytdlpProcess.stdout.pipe(ffmpegProcess.stdin).on('error', (err) => {
                console.error('‚ö†Ô∏è Pipe error:', err);
                cleanupProcesses(ytdlpProcess, ffmpegProcess);
            });

            // ‚≠ê ‡πÅ‡∏™‡∏î‡∏á FFmpeg stderr ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ errors
            ffmpegProcess.stderr.on('data', (data) => {
                const errorMsg = data.toString();
                // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ errors ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                if (errorMsg.toLowerCase().includes('error') || 
                    errorMsg.toLowerCase().includes('invalid data')) {
                    console.error('üö® FFmpeg ERROR:', errorMsg.trim());
                }
            });

            ffmpegProcess.on('close', (code) => {
                if (code !== 0 && code !== null) {
                    console.error(`‚ùå FFmpeg exited with code: ${code}`);
                }
                cleanupProcesses(ytdlpProcess, ffmpegProcess);
            });

            ffmpegProcess.on('error', (err) => {
                console.error('‚ùå FFmpeg process error:', err);
                cleanupProcesses(ytdlpProcess, ffmpegProcess);
            });

            console.log('‚úÖ yt-dlp stream created successfully');
            
            setTimeout(() => {
                if (!isResolved) {
                    isResolved = true;
                    resolve(resource);
                }
            }, 800);

        } catch (error) {
            if (!isResolved) {
                console.error('‚ùå yt-dlp error:', error);
                cleanupProcesses(ytdlpProcess, ffmpegProcess);
                reject(error);
            }
        }
    });
}
async function playNext(guildId, lastVideoId = null) {
    if (processingGuilds.has(guildId)) {
        console.log('‚ö†Ô∏è Already processing next song for this guild, skipping...');
        return;
    }

    // Check if the current player is still playing
    if (config.state.currentPlayer && config.state.currentPlayer.state.status === AudioPlayerStatus.Playing) {
        console.log('‚è≥ Player is still playing, waiting for it to finish...');
        return;
    }

    processingGuilds.add(guildId);

    try {
        // Check if the previous song ended prematurely
        if (config.state.currentSong && config.state.currentSong.playDuration < 5000) {
            console.warn(`‚ö†Ô∏è Song ended too quickly (${config.state.currentSong.playDuration}ms), retrying...`);
            config.queue.unshift(config.state.currentSong);
            config.state.currentSong = null;
            processingGuilds.delete(guildId);
            return playNext(guildId, lastVideoId);
        }

        // Ensure autoplay only starts after confirming the current song has finished properly
        if (config.queue.length === 0 && config.settings.autoplayEnabled) {
            console.log('üîÑ Queue is empty. Autoplay is enabled. Waiting before autoplay...');

            if (config.state.currentSong && config.state.currentSong.hasStartedPlaying) {
                console.log('‚úÖ Current song finished properly. Starting autoplay...');
                const nextUrl = await getRandomYouTubeVideo();

                if (nextUrl) {
                    config.queue.push({
                        cleanUrl: nextUrl,
                        voiceChannel: config.state.currentSong.voiceChannel,
                        textChannel: config.state.lastTextChannel,
                        message: { reply: () => {} },
                        title: 'Autoplay Song'
                    });
                    return playNext(guildId, nextUrl);
                }
            } else {
                console.warn('‚ö†Ô∏è Autoplay delayed due to incomplete song playback.');
            }
        }

        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        if (config.state.leaveTimeout) {
            clearTimeout(config.state.leaveTimeout);
            config.state.leaveTimeout = null;
        }
        if (global.nextTimeout) {
            clearTimeout(global.nextTimeout);
            global.nextTimeout = null;
        }

        if (!lastVideoId && config.state.lastPlayedVideoId) {
            lastVideoId = config.state.lastPlayedVideoId;
        }

        if (config.queue.length > 0) {
            config.state.isPlaying = true;
            config.state.isPaused = false;
            
            const { cleanUrl, voiceChannel, message, textChannel, title } = config.queue.shift();
            console.log('üéµ Playing from queue:', title || cleanUrl);
            
            config.state.currentSong = { cleanUrl, title: title || cleanUrl, voiceChannel };
            
            if (textChannel) {
                config.state.lastTextChannel = textChannel;
            }
            
            let videoId = null;
            try {
                videoId = extractVideoId(cleanUrl);
                config.state.lastPlayedVideoId = videoId;
            } catch (e) {
                console.error('Error extracting videoId:', e);
            }

            let connection = config.state.currentConnection;
            const needNewConnection = !connection || 
                connection.state.status === VoiceConnectionStatus.Destroyed ||
                connection.state.status === VoiceConnectionStatus.Disconnected;

            if (needNewConnection) {
                if (connection) {
                    try {
                        connection.destroy();
                    } catch (e) {
                        console.error('Error destroying old connection:', e);
                    }
                }
                
                try {
                    connection = await createVoiceConnection(voiceChannel, guildId);
                    config.state.currentConnection = connection;
                } catch (error) {
                    console.error('‚ùå Failed to create voice connection:', error);
                    
                    if (message && message.channel) {
                        message.channel.send('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...')
                            .catch(e => console.error('Send error:', e));
                    }
                    
                    config.state.isPlaying = false;
                    processingGuilds.delete(guildId);
                    config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                    
                    const state = connectionState.get(guildId) || { retries: 0 };
                    if (state.retries < MAX_RETRIES) {
                        setTimeout(() => {
                            playNext(guildId, lastVideoId);
                        }, RETRY_DELAY * (state.retries + 1));
                    } else {
                        console.error('‚ùå Max connection retries reached');
                        state.retries = 0;
                    }
                    return;
                }
            } else if (connection.state.status !== VoiceConnectionStatus.Ready) {
                try {
                    console.log(`‚è≥ [${guildId}] Waiting for connection to be ready...`);
                    await entersState(connection, VoiceConnectionStatus.Ready, CONNECTION_TIMEOUT);
                    console.log(`‚úÖ [${guildId}] Connection ready`);
                } catch (error) {
                    console.error('‚ùå Connection not ready:', error);
                    
                    config.state.currentConnection?.destroy();
                    config.state.currentConnection = null;
                    config.state.isPlaying = false;
                    processingGuilds.delete(guildId);
                    config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                    
                    setTimeout(() => {
                        playNext(guildId, lastVideoId);
                    }, RETRY_DELAY);
                    return;
                }
            }

            let resource;
            
            try {
                resource = await playWithYtDlp(cleanUrl, message, connection);
            } catch (error) {
                console.error('‚ùå Failed to play:', error);
                if (message && message.channel) {
                    message.channel.send('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ')
                        .catch(e => console.error('Send error:', e));
                }
                config.state.isPlaying = false;
                processingGuilds.delete(guildId);
                return playNext(guildId, lastVideoId);
            }

            if (!resource) {
                console.error('‚ùå No resource created');
                if (message && message.channel) {
                    message.channel.send('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á audio stream ‡πÑ‡∏î‡πâ')
                        .catch(e => console.error('Send error:', e));
                }
                config.state.isPlaying = false;
                processingGuilds.delete(guildId);
                return;
            }

            let player = config.state.currentPlayer;
            if (!player) {
                player = createAudioPlayer();
                config.state.currentPlayer = player;
                connection.subscribe(player);
            } else {
                player.removeAllListeners();
            }

            let hasStartedPlaying = false;
            let playStartTime = null;

            player.once(AudioPlayerStatus.Playing, () => {
                hasStartedPlaying = true;
                playStartTime = Date.now();
                console.log('üé∂ Now playing:', title || cleanUrl);
                console.log(`   Started at: ${new Date().toISOString()}`);
                if (message && message.channel) {
                    message.channel.send(`üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **${title || cleanUrl}**`)
                        .catch(e => console.error('Send error:', e));
                }
            });

            player.on(AudioPlayerStatus.Buffering, (oldState, newState) => {
                console.log(`‚è∏Ô∏è Buffering... (from ${oldState.status})`);
            });
            
            console.log('‚è≥ Waiting for audio stream to be ready...');
            
            let streamReady = false;
            const checkInterval = setInterval(() => {
                if (resource.metadata.hasReceivedData() && !streamReady) {
                    streamReady = true;
                    clearInterval(checkInterval);
                    console.log('‚úÖ Stream ready with data, starting playback');
                    player.play(resource);
                }
            }, 100);
            
            setTimeout(() => {
                if (!streamReady) {
                    streamReady = true;
                    clearInterval(checkInterval);
                    console.warn('‚ö†Ô∏è Stream timeout, starting playback anyway');
                    player.play(resource);
                }
            }, 5000);

            player.on(AudioPlayerStatus.Idle, () => {
                // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å autoplay timeout ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏ö
                if (global.nextTimeout) {
                    clearTimeout(global.nextTimeout);
                    global.nextTimeout = null;
                    console.log('‚èπÔ∏è Cleared all pending autoplay timeouts');
                }
                
                // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô multiple idle events
                const idleLockKey = `${guildId}-idle`;
                if (processingGuilds.has(idleLockKey)) {
                    console.log('‚ö†Ô∏è Already processing idle state, skipping...');
                    return;
                }
                processingGuilds.add(idleLockKey);
                
                const playDuration = playStartTime ? Date.now() - playStartTime : 0;
                const durationStr = playDuration > 0 ? `${Math.round(playDuration / 1000)}s` : 'unknown';
                
                console.log(`‚èπÔ∏è Player idle after ${durationStr}, checking next action...`);
                console.log(`   hasStartedPlaying: ${hasStartedPlaying}, playDuration: ${playDuration}ms`);
                
                // ‚≠ê ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡πÉ‡∏ä‡πâ expectedDuration)
               if (resource.metadata?.expectedDuration) {
                    const expectedDuration = resource.metadata.expectedDuration;
                    const percentPlayed = (playDuration / expectedDuration) * 100;
                    
                    console.log(`üìä Played ${Math.round(playDuration/1000)}s / ${Math.round(expectedDuration/1000)}s (${percentPlayed.toFixed(1)}%)`);
                    
                    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 75% = ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                    if (percentPlayed < 75 && hasStartedPlaying && playDuration > 10000) {
                        console.warn(`‚ö†Ô∏è Song ended prematurely at ${percentPlayed.toFixed(1)}% - RETRYING`);
                        
                        if (resource.metadata?.cleanup) {
                            resource.metadata.cleanup();
                        }
                        
                        // Retry current song ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
                        config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                        processingGuilds.delete(idleLockKey);
                        processingGuilds.delete(guildId);
                        config.state.isPlaying = false;
                        
                        setTimeout(() => playNext(guildId, videoId), 3000);
                        return;
                    }
                }
                            
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ connection ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const connectionOk = connection && 
                    connection.state.status === VoiceConnectionStatus.Ready;
                
                if (!connectionOk) {
                    console.warn(`‚ö†Ô∏è Connection lost during playback - attempting recovery`);
                    
                    if (resource.metadata && resource.metadata.cleanup) {
                        try {
                            resource.metadata.cleanup();
                        } catch (e) {
                            console.error('Cleanup error:', e);
                        }
                    }
                    
                    config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                    config.state.isPlaying = false;
                    processingGuilds.delete(idleLockKey);
                    processingGuilds.delete(guildId);
                    
                    setTimeout(() => {
                        console.log('üîÑ Retrying playback after connection recovery...');
                        playNext(guildId, videoId);
                    }, RECONNECT_DELAY);
                    return;
                }
                
                // ‚≠ê ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (< 10s) = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á
                if (playDuration < 10000 && hasStartedPlaying) {
                    console.warn(`‚ö†Ô∏è Song ended too quickly (${Math.round(playDuration/1000)}s) - RETRYING`);
                    
                    if (resource.metadata && resource.metadata.cleanup) {
                        try {
                            resource.metadata.cleanup();
                        } catch (e) {
                            console.error('Cleanup error:', e);
                        }
                    }
                    
                    // Retry current song
                    config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                    processingGuilds.delete(idleLockKey);
                    processingGuilds.delete(guildId);
                    config.state.isPlaying = false;
                    
                    setTimeout(() => playNext(guildId, videoId), 2000);
                    return;
                }
                
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢
                if (!hasStartedPlaying) {
                    console.warn(`‚ö†Ô∏è Song never started playing - RETRYING`);
                    
                    if (resource.metadata && resource.metadata.cleanup) {
                        try {
                            resource.metadata.cleanup();
                        } catch (e) {
                            console.error('Cleanup error:', e);
                        }
                    }
                    
                    config.queue.unshift({ cleanUrl, voiceChannel, message, textChannel, title });
                    processingGuilds.delete(idleLockKey);
                    processingGuilds.delete(guildId);
                    config.state.isPlaying = false;
                    
                    setTimeout(() => playNext(guildId, videoId), 2000);
                    return;
                }

                // ‚≠ê ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡∏à‡∏£‡∏¥‡∏á! üéâ
                console.log(`‚úÖ Song completed successfully`);
                
                if (config.state.currentSong) {
                    console.log(`‚úÖ Finished playing: ${config.state.currentSong.title || config.state.currentSong.cleanUrl}`);
                }

                // Cleanup resources
                if (resource.metadata && resource.metadata.cleanup) {
                    try {
                        resource.metadata.cleanup();
                    } catch (cleanupError) {
                        console.error('‚ùå Error during resource cleanup:', cleanupError);
                    }
                }

                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô queue ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (config.queue.length > 0) {
                    console.log(`‚ñ∂Ô∏è Found ${config.queue.length} song(s) in queue, playing next...`);
                    processingGuilds.delete(idleLockKey);
                    processingGuilds.delete(guildId);
                    try {
                        playNext(guildId, videoId);
                    } catch (playNextError) {
                        console.error('‚ùå Error during playNext:', playNextError);
                    }
                    return;
                }

                // ‡∏ñ‡πâ‡∏≤ autoplay ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                if (!config.settings.autoplayEnabled) {
                    console.log('‚è∏Ô∏è Autoplay is disabled. Stopping playback.');
                    config.state.isPlaying = false;
                    processingGuilds.delete(idleLockKey);
                    processingGuilds.delete(guildId);
                    return;
                }

                // ‚≠ê ‡πÄ‡∏£‡∏¥‡πà‡∏° autoplay (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡∏à‡∏£‡∏¥‡∏á)
                console.log('üîÑ Queue is empty. Autoplay is enabled. Waiting before autoplay...');
                processingGuilds.delete(idleLockKey);
                processingGuilds.delete(guildId);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ timeout ‡∏≠‡∏∑‡πà‡∏ô‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                if (global.nextTimeout) {
                    console.log('‚ö†Ô∏è Autoplay timeout already exists, skipping new timeout');
                    return;
                }
                
                const autoplayDelay = config.settings.autoplayDelay || 3000;
                console.log(`‚è∞ Autoplay will start in ${autoplayDelay}ms (${Math.round(autoplayDelay/1000)}s)`);
                
                global.nextTimeout = setTimeout(async () => {
                    global.nextTimeout = null; // ‡∏•‡πâ‡∏≤‡∏á timeout ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                    
                    if (config.queue.length > 0) {
                        console.log('‚ö†Ô∏è Queue has songs now, canceling autoplay');
                        return playNext(guildId, videoId);
                    }

                    console.log('üîÑ Starting autoplay...');
                    const nextUrl = await getRandomYouTubeVideo();

                    if (nextUrl && voiceChannel) {
                        console.log('‚úÖ Adding autoplay song:', nextUrl);
                        config.queue.push({ 
                            cleanUrl: nextUrl, 
                            voiceChannel,
                            textChannel: config.state.lastTextChannel,
                            message: { 
                                reply: () => {},
                                channel: config.state.lastTextChannel
                            },
                            title: 'Autoplay Song'
                        });

                        try {
                            config.state.lastPlayedVideoId = extractVideoId(nextUrl);
                        } catch (e) {
                            console.error('Extract ID error:', e);
                        }

                        return playNext(guildId, config.state.lastPlayedVideoId);
                    } else {
                        console.error('‚ùå Failed to get autoplay song');
                        config.state.isPlaying = false;
                    }
                }, autoplayDelay);
            });
                        
            player.on('error', error => {
                console.error('‚ùå Audio player error:', error);

                if (resource.metadata && resource.metadata.cleanup) {
                    try {
                        resource.metadata.cleanup();
                    } catch (cleanupError) {
                        console.error('‚ùå Error during resource cleanup:', cleanupError);
                    }
                }

                if (message && message.channel) {
                    message.channel.send('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
                        .catch(e => console.error('Send error:', e));
                }
                processingGuilds.delete(guildId);

                try {
                    playNext(guildId, videoId);
                } catch (playNextError) {
                    console.error('‚ùå Error during playNext:', playNextError);
                }
            });

            processingGuilds.delete(guildId);
            return;
        }

        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
        console.log('‚è∏Ô∏è Queue empty, setting leave timeout...');
        if (config.state.currentConnection) {
            config.state.leaveTimeout = setTimeout(() => {
                if (config.state.currentConnection) {
                    config.state.currentConnection.destroy();
                    console.log('üëã Left voice channel after inactivity');
                }
                config.state.isPlaying = false;
            }, config.settings.leaveTimeout);
        }
        config.state.isPlaying = false;
        processingGuilds.delete(guildId);
        
    } catch (error) {
        console.error('‚ùå Error in playNext:', error);
        processingGuilds.delete(guildId);
        throw error;
    }
}

module.exports = {
    setClient,
    playNext
};