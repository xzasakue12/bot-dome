require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');
const playdl = require('play-dl');
const ytdl = require('ytdl-core');
const { spawn } = require('child_process');
const path = require('path');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

client.once('ready', async () => {
    if (process.env.YT_COOKIE) {
        await playdl.setToken({ youtube: { cookie: process.env.YT_COOKIE } });
        console.log('YouTube cookie loaded!');
    }
    console.log(`Logged in as ${client.user.tag}`);
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏ö‡∏≠‡∏ó)
function checkVoiceChannelEmpty(voiceChannel) {
    if (!voiceChannel) return true;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏≠‡∏ó
    const humanMembers = voiceChannel.members.filter(member => !member.user.bot);
    return humanMembers.size === 0;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô
function checkAndLeaveIfEmpty(voiceChannel) {
    if (checkVoiceChannelEmpty(voiceChannel)) {
        console.log('üë§ No humans in voice channel, leaving...');
        if (currentConnection) {
            currentConnection.destroy();
            currentConnection = null;
        }
        if (currentPlayer) {
            currentPlayer.stop();
            currentPlayer = null;
        }
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß
        queue.length = 0;
        isPlaying = false;
        lastPlayedVideoId = null;
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if (lastTextChannel) {
            lastTextChannel.send('üëã ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞').catch(e => console.error('Send message error:', e));
        }
        return true;
    }
    return false;
}

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á ---
const queue = [];
let isPlaying = false;
let currentConnection = null;
let currentPlayer = null;
let leaveTimeout = null;
let lastPlayedVideoId = null;
let lastTextChannel = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
let currentSong = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
let isPaused = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pause

function getYtDlpPath() {
    if (process.platform === 'win32') {
        return path.resolve(__dirname, 'yt-dlp.exe');
    } else {
        return path.resolve(__dirname, 'yt-dlp');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube
async function getRandomYouTubeVideo() {
    try {
        // ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á Anime ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡πÅ‡∏•‡∏∞ Rap ‡πÑ‡∏ó‡∏¢
        const searchQueries = [
            'anime opening',
            'anime ending',
            'japanese anime song',
            'anime ost',
            'j-pop anime',
            'anime music',
            '‡πÅ‡∏£‡πá‡∏û‡πÑ‡∏ó‡∏¢',
            'thai rap',
            'rap thai',
            '‡πÑ‡∏ó‡∏¢‡πÅ‡∏£‡πá‡∏û',
            'thai hiphop',
            '‡πÅ‡∏£‡πá‡∏û‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢'
        ];
        
        const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
        console.log(`üîç Searching YouTube for: ${randomQuery}`);
        
        const searchResult = await playdl.search(randomQuery, {
            limit: 20,
            source: { youtube: 'video' }
        });
        
        if (searchResult && searchResult.length > 0) {
            const randomIndex = Math.floor(Math.random() * searchResult.length);
            const video = searchResult[randomIndex];
            console.log(`‚úÖ Found random video: ${video.title}`);
            return video.url;
        }
    } catch (e) {
        console.error('‚ùå Random YouTube search error:', e);
    }
    return null;
}

async function playNext(guildId, lastVideoId = null) {
    if (leaveTimeout) clearTimeout(leaveTimeout);
    if (global.nextTimeout) clearTimeout(global.nextTimeout);

    if (!lastVideoId && lastPlayedVideoId) {
        lastVideoId = lastPlayedVideoId;
    }

    if (queue.length > 0) {
        isPlaying = true;
        isPaused = false;
        const { cleanUrl, voiceChannel, message, textChannel, title } = queue.shift();
        console.log('üéµ Playing from queue:', cleanUrl);
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        currentSong = { cleanUrl, title: title || cleanUrl, voiceChannel };
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (textChannel) {
            lastTextChannel = textChannel;
        }
        
        let videoId = null;
        try {
            videoId = playdl.extractID(cleanUrl);
            lastPlayedVideoId = videoId;
        } catch (e) {
            console.error('Error extracting videoId:', e);
        }

        const connection = joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: voiceChannel.guild.id,
            adapterCreator: voiceChannel.guild.voiceAdapterCreator
        });
        currentConnection = connection;
        
        let resource;
        let stream;
        
        try {
            console.log('Attempting yt-dlp stream...');
            const ytDlpPath = getYtDlpPath();
            const ytdlpProcess = spawn(ytDlpPath, [
                '-f', 'bestaudio',
                '--no-playlist',
                '-o', '-',
                '--quiet',
                '--no-warnings',
                '--ignore-errors',  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                cleanUrl
            ], { 
                shell: false, 
                windowsHide: true,
                stdio: ['ignore', 'pipe', 'ignore']  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'pipe' ‡πÄ‡∏õ‡πá‡∏ô 'ignore' ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            });

            ytdlpProcess.on('error', (err) => {
                console.error('yt-dlp process error:', err);
            });

            resource = createAudioResource(ytdlpProcess.stdout, {
                inputType: 'arbitrary',
                inlineVolume: true
            });
            
            console.log('‚úÖ yt-dlp stream started');
            message.reply(`üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${title || cleanUrl}`);
        } catch (ytdlpError) {
            console.error('yt-dlp error:', ytdlpError.message);
            
            try {
                console.log('Attempting play-dl stream...');
                stream = await playdl.stream(cleanUrl, { quality: 2 });
                resource = createAudioResource(stream.stream, { 
                    inputType: stream.type,
                    inlineVolume: true 
                });
                console.log('‚úÖ play-dl stream success');
                message.reply(`üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô (play-dl): ${title || cleanUrl}`);
            } catch (error) {
                console.error('play-dl error:', error.message);
                message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ');
                isPlaying = false;
                return playNext(guildId, lastVideoId);
            }
        }

        if (!resource) {
            console.error('‚ùå No resource created');
            message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á audio stream ‡πÑ‡∏î‡πâ');
            isPlaying = false;
            return playNext(guildId, lastVideoId);
        }

        const player = createAudioPlayer();
        currentPlayer = player;
        connection.subscribe(player);
        
        console.log('Playing resource...');
        player.play(resource);

        player.on(AudioPlayerStatus.Idle, () => {
            console.log('‚èπÔ∏è Player idle, playing next...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠
            if (voiceChannel && checkAndLeaveIfEmpty(voiceChannel)) {
                return;
            }
            
            playNext(guildId, videoId);
        });

        player.on('error', error => {
            console.error('‚ùå Audio player error:', error);
            message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á');
            playNext(guildId, videoId);
        });

        return;
    }

    // --- Autoplay: ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å YouTube ---
    if (queue.length === 0 && lastVideoId) {
        console.log('üîÑ Starting autoplay search...');
        global.nextTimeout = setTimeout(async () => {
            if (queue.length === 0) {
                // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube
                const nextUrl = await getRandomYouTubeVideo();

                // ‡∏´‡∏≤ voice channel
                let voiceChannel;
                const guild = client.guilds.cache.get(guildId);
                if (guild) {
                    const member = guild.members.me;
                    if (member && member.voice && member.voice.channelId) {
                        voiceChannel = guild.channels.cache.get(member.voice.channelId);
                    }
                }

                if (nextUrl && voiceChannel) {
                    console.log('‚úÖ Adding autoplay song to queue:', nextUrl);
                    queue.push({ 
                        cleanUrl: nextUrl, 
                        voiceChannel,
                        textChannel: lastTextChannel, // ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                        message: { 
                            reply: (msg) => {
                                // ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ
                                if (lastTextChannel) {
                                    lastTextChannel.send(`üé≤ Autoplay: ${msg}`).catch(e => console.error('Send message error:', e));
                                } else {
                                    // Fallback: ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
                                    const textChannel = guild.channels.cache.find(ch => ch.type === 0 && ch.permissionsFor(guild.members.me).has('SendMessages'));
                                    if (textChannel) {
                                        textChannel.send(`üé≤ Autoplay: ${msg}`).catch(e => console.error('Send message error:', e));
                                    }
                                }
                            }
                        } 
                    });
                    
                    try {
                        lastPlayedVideoId = playdl.extractID(nextUrl);
                    } catch (e) {
                        console.error('Extract ID error:', e);
                    }
                    
                    return playNext(guildId, lastPlayedVideoId);
                } else {
                    console.log('‚ùå No next URL or voice channel found');
                }
            }
        }, 3000);
        return;
    }

    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
    console.log('‚è∏Ô∏è Queue empty, setting leave timeout...');
    if (currentConnection) {
        leaveTimeout = setTimeout(() => {
            if (currentConnection) {
                currentConnection.destroy();
                console.log('üëã Left voice channel after inactivity');
            }
            isPlaying = false;
        }, 60000);
    }
    isPlaying = false;
}

client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('!play') || message.author.bot) return;

    const urlMatch = message.content.match(/https?:\/\/(?:www\.)?(?:youtube\.com|youtu\.be)\S+/i);
    const url = urlMatch ? urlMatch[0].split('&')[0] : null;

    if (!url || typeof url !== 'string' || !url.startsWith('http')) {
        console.log('URL invalid or not found');
        return message.reply('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    let videoId;
    let cleanUrl;
    try {
        videoId = playdl.extractID(url);
        cleanUrl = `https://www.youtube.com/watch?v=${videoId}`;
    } catch (e) {
        console.log('Error extracting videoId:', e);
        return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    if (!videoId) {
        console.log('No videoId found');
        return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    const validateResult = playdl.yt_validate(cleanUrl);
    if (validateResult !== 'video') {
        return message.reply('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
    }

    let info;
    try {
        info = await playdl.video_basic_info(cleanUrl);
        console.log('video_basic_info:', info);
        if (!info || !info.video_details || !info.video_details.id) {
            console.log('video_basic_info: invalid info', info);
            return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
    } catch (e) {
        console.log('video_basic_info error:', e);
        return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }

    const voiceChannel = message.member.voice.channel;
    if (!voiceChannel) return message.reply('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô');

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    lastTextChannel = message.channel;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á
    let songTitle = cleanUrl;
    try {
        const videoInfo = await playdl.video_info(cleanUrl);
        if (videoInfo && videoInfo.video_details) {
            songTitle = videoInfo.video_details.title;
        }
    } catch (e) {
        console.log('Cannot get video title:', e);
    }

    queue.push({ cleanUrl, voiceChannel, message, textChannel: message.channel, title: songTitle });
    message.reply(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß: **${songTitle}**`);
    
    if (!isPlaying) {
        playNext(voiceChannel.guild.id);
    }
});

client.on('messageCreate', (message) => {
    if (message.author.bot) return;

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !skip
    if (message.content.startsWith('!skip')) {
        if (currentPlayer) {
            currentPlayer.stop();
            message.reply('‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß!');
        } else {
            message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !queue - ‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á
    if (message.content.startsWith('!queue')) {
        if (queue.length === 0 && !currentSong) {
            return message.reply('üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß');
        }

        let queueMessage = 'üìã **‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á**\n\n';
        
        if (currentSong) {
            queueMessage += `üéµ **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô:** ${currentSong.title}\n\n`;
        }

        if (queue.length > 0) {
            queueMessage += '**‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:**\n';
            queue.forEach((song, index) => {
                queueMessage += `${index + 1}. ${song.title || song.cleanUrl}\n`;
            });
            queueMessage += `\nüìä **‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** ${queue.length} ‡πÄ‡∏û‡∏•‡∏á`;
        } else {
            queueMessage += '‚ú® ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (Autoplay ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)';
        }

        message.reply(queueMessage);
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !nowplaying - ‡∏î‡∏π‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
    if (message.content.startsWith('!nowplaying') || message.content.startsWith('!np')) {
        if (!currentSong) {
            return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }

        message.reply(`üéµ **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô:** ${currentSong.title}\nüîó ${currentSong.cleanUrl}`);
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !stop - ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß
    if (message.content.startsWith('!stop')) {
        if (!currentPlayer && queue.length === 0) {
            return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß
        queue.length = 0;
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô
        if (currentPlayer) {
            currentPlayer.stop();
        }

        // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
        if (currentConnection) {
            currentConnection.destroy();
            currentConnection = null;
        }

        isPlaying = false;
        currentSong = null;
        lastPlayedVideoId = null;

        message.reply('‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!');
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !pause - ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    if (message.content.startsWith('!pause')) {
        if (!currentPlayer) {
            return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }

        if (isPaused) {
            return message.reply('‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        }

        currentPlayer.pause();
        isPaused = true;
        message.reply('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !resume - ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠
    if (message.content.startsWith('!resume')) {
        if (!currentPlayer) {
            return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }

        if (!isPaused) {
            return message.reply('‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        }

        currentPlayer.unpause();
        isPaused = false;
        message.reply('‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠');
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !volume - ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (message.content.startsWith('!volume')) {
        const args = message.content.split(' ');
        
        if (!currentPlayer) {
            return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        }

        if (args.length < 2) {
            return message.reply('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (0-100)\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `!volume 50`');
        }

        const volume = parseInt(args[1]);
        
        if (isNaN(volume) || volume < 0 || volume > 100) {
            return message.reply('‚ùå ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100');
        }

        try {
            const resource = currentPlayer.state.resource;
            if (resource && resource.volume) {
                resource.volume.setVolume(volume / 100);
                message.reply(`üîä ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô ${volume}%`);
            } else {
                message.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
            }
        } catch (e) {
            console.error('Volume error:', e);
            message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á');
        }
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (message.content.startsWith('!help')) {
        const helpMessage = `
üéµ **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏•‡∏á Discord** üéµ

**üìÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á**
\`!play <YouTube URL>\` - ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube
\`!skip\` - ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
\`!stop\` - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
\`!pause\` - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
\`!resume\` - ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠

**üìã ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß**
\`!queue\` - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
\`!nowplaying\` ‡∏´‡∏£‡∏∑‡∏≠ \`!np\` - ‡∏î‡∏π‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô

**üîä ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤**
\`!volume <0-100>\` - ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: !volume 50)

**‚ú® ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©**
üé≤ **Autoplay** - ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á Anime ‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡πá‡∏û‡πÑ‡∏ó‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
üëã **Auto-leave** - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á

**üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö**
- ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà
- ‡∏£‡∏∞‡∏ö‡∏ö Autoplay ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á
        `.trim();
        
        message.reply(helpMessage);
    }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
client.on('voiceStateUpdate', (oldState, newState) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!currentConnection) return;
    
    const botMember = newState.guild.members.me;
    if (!botMember || !botMember.voice || !botMember.voice.channel) return;
    
    const botVoiceChannel = botMember.voice.channel;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (oldState.channelId === botVoiceChannel.id && newState.channelId !== botVoiceChannel.id) {
        console.log(`üë§ User left voice channel: ${oldState.member.user.tag}`);
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        setTimeout(() => {
            if (checkAndLeaveIfEmpty(botVoiceChannel)) {
                console.log('‚úÖ Bot left because no humans remain');
            }
        }, 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á
    }
});

client.login(process.env.TOKEN);
